{% extends 'base.html.twig' %}

{% block title %}Edit User
{% endblock %}

{% block styles %}
 <link
  rel="stylesheet"
  href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css"
  type="text/css"
/>
  {% endblock %}

{% block body %}
  {# <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/> #}
  {# <script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script> #}

<div class="my-dropzone">
 {{ include('user/_form.html.twig', {'button_label': 'Update'}) }}
 </div>

 {{ form_start(allform) }}
    {{ form_widget(allform) }}
    <button class="btn">{{ button_label|default('Save') }}</button>
{{ form_end(allform) }}

 
{# <a href="{{ path('app_user_index') }}">back to list</a> #}

{# {{ include('user/_delete_form.html.twig') }} #}


{% endblock %}

{% block javascripts %}
					<script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>	
                    <script>
  // Dropzone has been added as a global variable.
  const dropzone = new Dropzone("div.my-dropzone", { url: "/file/post" });
</script>

{# <script type="text/javascript">
	const form = document.querySelector("form"),
	fileInput = document.querySelector(".user_profile_picture_image"),
	progressArea = document.querySelector(".progress-area"),
	uploadedArea = document.querySelector(".uploaded-area");
	
 	form.addEventListener("click", () =>{
	  fileInput.click();
	});
	
	fileInput.onchange = ({target})=>{
	  let file = target.files[0]; //getting file [0] this means if user has selected multiple files then get first one only
	  if(file){
	    let fileName = file.name; //getting file name
	    if(fileName.length >= 12){ //if file name length is greater than 12 then split it and add ...
	      let splitName = fileName.split('.');
	      fileName = splitName[0].substring(0, 13) + "... ." + splitName[1];
	    }
	    uploadFile(fileName); //calling uploadFile with passing file name as an argument
	  }
	}
	
 	function uploadFile(name){
	  let xhr = new XMLHttpRequest(); //creating new xhr object (AJAX)
	  xhr.open("POST", "{{ path('my_profile')}}"); //sending post request to the specified URL
	  xhr.upload.addEventListener("progress", ({loaded, total}) =>{ //file uploading progress event
	    let fileLoaded = Math.floor((loaded / total) * 100); //getting percentage of loaded file size
	    let fileTotal = Math.floor(total / 1000); //gettting total file size in KB from bytes
	    let fileSize;
 	    (fileTotal < 1024) ? fileSize = fileTotal + " KB" : fileSize = (loaded / (1024*1024)).toFixed(2) + " MB";
	    let progressHTML = `<li class="row">
	                          <i class="fas fa-file-alt"></i>
	                          <div class="content">
	                            <div class="details">
	                              <span class="name">${name} • Uploading</span>
	                              <span class="percent">${fileLoaded}%</span>
	                            </div>
	                            <div class="progress-bar">
	                              <div class="progress" style="width: ${fileLoaded}%"></div>
	                            </div>
	                          </div>
	                        </li>`;
 	    uploadedArea.classList.add("onprogress");
	    progressArea.innerHTML = progressHTML;
	    if(loaded == total){
	      progressArea.innerHTML = "";
	      let uploadedHTML = `<li class="row">
	                            <div class="content upload">
	                              <i class="fas fa-file-alt"></i>
	                              <div class="details">
	                                <span class="name">${name} • Uploaded</span>
	                                <span class="size">${fileSize}</span>
	                              </div>
	                            </div>
	                            <i class="fas fa-check"></i>
	                          </li>`;
	      uploadedArea.classList.remove("onprogress");
 	      uploadedArea.insertAdjacentHTML("afterbegin", uploadedHTML); //remove this line if you don't want to show upload history
	    }
	  });
	  let data = new FormData(form); //FormData is an object to easily send form data
	  xhr.send(data); //sending form data
	}
	<script> #}
 {% endblock %}